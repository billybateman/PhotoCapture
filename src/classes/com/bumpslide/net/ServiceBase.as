/*** Replacement for Adobe ServiceBase* * - uses weak references for all event listeners* - provides loading queue* - handles timeouts and retries* * @author David Knape*/package com.bumpslide.net {				import flash.events.*;	import flash.net.URLRequest;	import flash.utils.Timer;		public class ServiceBase extends EventDispatcher {				protected var baseUrl:String;		protected var loaderQueue:Array;		protected var activeLoader:DynamicURLLoader;        protected var logEnabled:Boolean = false;				// override in subclass				protected var timeoutMs:int = 30000; // time to wait before calling timeout handler		protected var numRetries:int = 2; // set to 0 to never retry						// retry timer and counter		private var retryTimer:Timer;		private var retryCount:int = 0;                public function ServiceBase(baseUrl:String=null) {			this.baseUrl = baseUrl;			init();		}				private function init() : void {			retryTimer = new Timer( timeoutMs, 1);			retryTimer.addEventListener(TimerEvent.TIMER, handleTimeout );			reset();		}			/**		 * Clears pending requests		 */		public function reset() : void {			log( 'reset');			loaderQueue = new Array();						if(activeLoader!=null) {				activeLoader.close();			}						// reset timer			retryTimer.reset();			retryCount = 0;			activeLoader = null;		}				/**		 * Cancel active URL Request		 */		public function cancelActiveLoader():void		{			try {					activeLoader.close(); 			} catch (e:Error) { 				// active loader is null or does not have open connection 			}			activeLoader = null;			loadNext();		}				public function get busy () : Boolean {			return activeLoader!=null;		}				/**		 * Enqueue a URL request		 */		public function enqueueRequest( req:URLRequest, callback:Function=null, inputArgs:Array=null ):void		{			var l:DynamicURLLoader = getURLLoader();			l.pendingRequest = req;			l.callback = callback;			l.inputArgs = inputArgs;			l.requestId = req.url.split( baseUrl )[1];  			l.addEventListener('complete', onComplete, false, 0, true );						//trace('[ServiceBase] enqueueing request '+l.requestId); // for '+req.url);			loaderQueue.push( l );						if(activeLoader==null) loadNext();		}								// returns true if we are retrying, false if that was the last time		protected function retry():Boolean 		{						if(retryCount<numRetries) {				log('Retrying to load '+activeLoader.requestId );							retryCount++;								// close pending request				activeLoader.close();				activeLoader.load( activeLoader.pendingRequest );				retryTimer.reset();				retryTimer.start();				return true;			} else {				handleError('timed out');				cancelActiveLoader();				return false;			}		}						protected function getUrlRequest( relative_path:String ):URLRequest {			return new URLRequest( baseUrl + relative_path );		}										protected function loadNext():Boolean 		{						retryTimer.reset();			retryCount = 0;						activeLoader = loaderQueue.shift() as DynamicURLLoader;			if(activeLoader!=null) {				log('loading '+activeLoader.requestId);				activeLoader.load( activeLoader.pendingRequest );				retryTimer.start();				return true;			} else {				log('load queue is now empty'); 				return false;			}		}				protected function handleTimeout(e:TimerEvent=null) : void {			log('Timeout on try '+retryCount+'  -- Retries=' + numRetries);			retry();		}						protected function getURLLoader():DynamicURLLoader		{			var loader:DynamicURLLoader = new DynamicURLLoader();				loader.addEventListener("progress", onProgress, false, 0, true);				loader.addEventListener("ioError", onIOError, false, 0, true);				loader.addEventListener("securityError", onSecurityError, false, 0, true);						return loader;					}						protected function onIOError(event:IOErrorEvent):void		{			//trace('[ServiceBase] I/O error while loading '+activeLoader.requestId);			if(!retry()) {				handleError( event.text );			}		}							protected function onSecurityError(event:SecurityErrorEvent):void		{			//trace('[ServiceBase] Security error while loading '+activeLoader.requestId);			handleError( event.text );			loadNext();		}					protected function onProgress(event:ProgressEvent):void		{			//trace('[ServiceBase] onProgress '+ Math.floor( activeLoader.bytesLoaded/activeLoader.bytesTotal * 100) + '%');			dispatchEvent(event);		}				protected function onComplete(event:Event):void		{			log('Call complete: '+activeLoader.requestId);			if(activeLoader.callback!=null) {				try {					activeLoader.callback.call( this, event.target.data, activeLoader.inputArgs );				} catch (e:Error) {					log('Error in onComplete handler: ' + e.message);				}			}			dispatchEvent(event);			loadNext();		}								protected function handleError( msg:String="Unknown Eror Occured" ) : void {			log('ERROR - ' + msg );					}				protected function log( s:String ) : void {			if(logEnabled) trace('[ServiceBase] ' + s);		}									}	}