package com.bumpslide.util {        import com.adobe.utils.ArrayUtil;    import com.adobe.utils.StringUtil;        /**     * String Utility functions     *      * @author David Knape     */    public class StringUtil {    			// Make text fit by cutting it off and adding ellipsis to the end		static public function abbreviate ( origStr:String, maxLength:Number=50, moreIndicator:String='...', splitChar:String=' ') : String {					if(origStr.length<maxLength) {				return origStr;			}					var str:String = '';			var n:int = 0;			var pieces:Array = origStr.split(splitChar);	// split string into pieces			var charCount:int = pieces[n].length;			// running total of char count					// put pieces back together as long as the charCount doesn't exceed the max length			while(charCount<maxLength && n<pieces.length) {				str += pieces[n] + splitChar;					// put the space back as we add the piece to our new string				charCount += pieces[++n].length + splitChar.length ;	    // increase the character count			}					// do extra stuff if we now have an abbreviated string			if(n<pieces.length) {						//trace('[StringUtil.abbreviate] Shortened string to '+ str.length + 'chars : '+str);								// TODO - now that we are AS3, maybe we should use regex for this ?				// remove any chars from the end that are not letters or numbers				var badChars:Array = ['-', 'â€”', ',', '.', ' ', ':', '?', '!', ';', "\n", ' ', String.fromCharCode(10), String.fromCharCode(13)];				while( ArrayUtil.arrayContainsValue( badChars, str.charAt(str.length-1))) {				  // trace("[StringUtil.abbreviate] Chopping bad char before ellipsis: '"+str.charAt(str.length-1)+"'");				   str = str.slice(0,-1);				}				// add an ellipsis to the end				str = com.adobe.utils.StringUtil.trim(str) + moreIndicator;			}						// first word is longer than max length...			if(n==0) {				str = origStr.slice(0, maxLength)+moreIndicator;			}						return str;		}    	    }}