package com.bumpslide.util {	/**	* Some Bitmap and image-related utility functions	* 	* In as2, we had image smoothing stuff here.  For as3, just set bmp.smoothing=true	* where bmp = (loader.content as Bitmap)	* 	* @author David Knape  	*/		import flash.geom.Rectangle;    import flash.display.*;        public class ImageUtil	{		/**		* Resizes an image or rectangle to fit within a bounding box		* while preserving aspect ratio.  The third parameter is optional.		* AllowStretching allows the image bounds to be stetched beyond the 		* original size. By default this is off. We use this most often for sizing 		* dynamically loaded JPG's, and we don't want them to be stetched larger 		*  		* @param	original - image size as a rectangle, max dimensions if allowStetching is left to false		* @param	bounds - the target size and/or available space for displaying the image		* @param	allowStetching - default is false		*/		static public function resizeRect( original:Rectangle, bounds:Rectangle, allowStretching:Boolean=false ) : Rectangle {						var size:Rectangle = original.clone();												// first we size based on width			// check for max width, resize if necessary			if(allowStretching || size.width>bounds.width) {			  size.width = bounds.width;			  size.height = original.height / original.width * bounds.width;			}           				// after size by width, check height			// make it even smaller if necessary			if(size.height>bounds.height) {							size.height = bounds.height;				size.width = original.width/original.height * bounds.height;			}     						return size;					}				
        public static function resize(mc:DisplayObject, maxWidth:Number, maxHeight:Number, allowStretching:Boolean):void
        {        	mc.scaleX = mc.scaleY = 1;        	var mcRect:Rectangle = new Rectangle(0,0, mc.width, mc.height);			var newSize:Rectangle = ImageUtil.resizeRect( mcRect, new Rectangle(0,0,maxWidth,maxHeight), allowStretching );			mc.width = newSize.width;			mc.scaleY = mc.scaleX;        }    }}